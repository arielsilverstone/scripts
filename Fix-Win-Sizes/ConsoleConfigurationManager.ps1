#############################################################
# ConsoleConfigurationManager V2.0               
# Description: Applies registry-based console settings with  
# throttledjobs and logging              
# Author: Generated by Claude
# Date: April 12, 2025
#############################################################

function Write-Log {
    param($Message)
    "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $Message" | Add-Content "$PSScriptRoot\ConsoleConfig.log"
    Echo $Message
}

function Set-ConsoleRegistry {
    param($Path, $Settings)
    
    Try {
        if (-not (Test-Path $Path)) {
            NI $Path -Force | Out-Null
            Write-Log "Created registry path: $Path"
        }
        
        $Settings.GetEnumerator() | ForEach {
            SP $Path -Name $_.Key -Value $_.Value -ErrorAction SilentlyContinue
            Write-Log "Set $Path\$($_.Key) = $($_.Value)"
        }
        Return $true
    }
    Catch {
        Write-Log "ERROR on $Path : $($_.Exception.Message)"
        Return $false
    }
}

$CommonSettings = @{
    FaceName       = "Consolas"
    FontFamily     = 0x00000036
    FontSize       = 0x00140014
    InsertMode     = 0x00000001
    QuickEdit      = 0x00000001
    ScreenBufferSize = 0x00870064
    WindowSize     = 0x001b0064
}

$SpecialCases = @{
    "HKCU:\Console\CMD.EXE" = @{
        ScreenBufferSize = 0x003e8050
        WindowSize      = 0x00190050
    }
    "HKCU:\Console\%SystemRoot%_SYSTEM32_CMD.EXE" = @{
        FontSize        = 0x00120009
        ScreenBufferSize = 0x003e006e
        WindowSize      = 0x001b006e
    }
}

$AllPaths = @(
    "HKCU:\Console",
    "HKCU:\Console\CMD.EXE",
    "HKCU:\Console\POWERSHELL.EXE",
    "HKCU:\Console\%SystemRoot%_SYSTEM32_CMD.EXE",
    "HKCU:\Console\%SystemRoot%_SYSTEM32_PWSH.EXE",
    "HKCU:\Console\%SystemRoot%_SYSTEM32_WINDOWSPOWERSHELL_V1.0_POWERSHELL.EXE"
)

$MaxThreads 	= 5
$JobCollection 	= @()

$AllPaths | ForEach {
    While (($JobCollection | Where{$_.State -eq 'Running'}).Count -ge $MaxThreads) {
        Start-Sleep -Milliseconds 200
    }

    $CurrentSettings = $CommonSettings.Clone()
    If ($SpecialCases.ContainsKey($_)) {
        $SpecialCases[$_].GetEnumerator() | ForEach {
            $CurrentSettings[$_.Key] = $_.Value
        }
    }

    $CurrentJob = Start-ThrottledJob -ScriptBlock {
        param($Path, $Settings)
        $OperationResult = Set-ConsoleRegistry -Path $Path -Settings $Settings
        [PSCustomObject]@{
            Path    = $Path
            Success = $OperationResult
            When    = Get-Date -Format 'o'
        }
    } -Args $_, $CurrentSettings -Name "Config_$($_.Split('\')[-1])"

    $JobCollection += $CurrentJob
    Write-Log "Started job for $_"
}

$Results = $JobCollection | Wait-Job  | Receive-Job
		   $JobCollection | Remove-Job -Force

$Results | ForEach {
    $Status = If ($_.Success) {"SUCCESS"} Else {"FAILED"}
    Write-Log "$Status : $($_.Path) at $($_.When)"
}

$Results | FT -AutoSize

# Execute configuration
Set-ConsoleRegistry -Path "HKCU:\Console" -Settings $CommonSettings