#########################################################
# PowerShell Launcher Menu V.10
# Description: Launcher with menu options for various system tasks
# Author: Generated by Claude
# Date: April 12, 2025
#########################################################

# Global configuration variables
$Global:WindowWidth = 100
$Global:WindowHeight = 27
$Global:FontSize = 20

#########################################################
# Show-Menu Function
# Description: Displays the main system tools menu
#########################################################
function Show-Menu {
    cls # Clear screen
    echo "================================================================================"
    echo "                            SYSTEM TOOLS MENU                                   "
    echo "================================================================================"
    echo "1: Fix CMD Settings - Banner and Startup Directory         A: Apply All CMD Fixes (Options 1-3)"
    echo "2: Set CMD Window Size (100x27 for 4K resolution)          B: PowerShell Environment Tweaks"
    echo "3: Set CMD Font Size (Consolas 20)		    		   						  "
	echo "4: Currently Undefined                                                          "     
	echo "5: Configure PowerShell Console Size						 Q: Quit              "
    echo "================================================================================"
}

#╔=============================================================================╗
#║ Functions 1: Logging                                                        ║
#║ Purpose: Centralized logging function to record script actions              ║
#╚=============================================================================╝
Function Write-Log {
    Param (
        [string] $Message,
        [string] $LogFile = "$Env:USERPROFILE\Desktop\Trace.log"
    )
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry  = "$Timestamp - $Message"
    
    try {
        Add-Content -Path $LogFile -Value $LogEntry -EA 0
        echo $LogEntry # Optional: also write to console
    }
    catch {
        # Fallback logging mechanism
        echo "Logging failed: $_" | AC "$Env:TEMP\logging_errors.txt"
    }
}

#########################################################
# Fix-CmdBanner Function
# Description: Modifies CMD startup behavior (banner and directory)
#########################################################
function Fix-CmdBanner {
    # Log function entry
    Write-Log "Entering Fix-CmdBanner function"

    # Check for admin privileges
    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    echo "`nFixing CMD Banner and Startup Directory...`n" -FGC Cyan
    
    # Exit if not running as admin
    if (-not $IsAdmin) {
        echo "This operation requires administrative privileges." -FGC Red
        Write-Log "Fix-CmdBanner: Administrative privileges required"
        return
    }
    
    # Attempt to modify registry settings with comprehensive error handling
    # Manages potential exceptions during registry manipulation
    try {
        # Registry path for Command Processor settings
        $RegPath = "HKLM:\SOFTWARE\Microsoft\Command Processor"
        
        # Log start of operation
        echo "Checking current registry settings..." -FGC Yellow
        Write-Log "Checking registry settings at $RegPath"
        
        # Create or modify the AutoRun value
        $CurrentValue = GI -Path $RegPath -Name "AutoRun" -EA 0
        
        # Display current settings if they exist
        if ($CurrentValue) {
            echo "Current AutoRun value: $($CurrentValue.AutoRun)" -FGC Yellow
            Write-Log "Current AutoRun value: $($CurrentValue.AutoRun)"
        } else {
            echo "No AutoRun value currently exists." -FGC Yellow
            Write-Log "No existing AutoRun value found"
        }
        
        # Prompt user for action
        echo "`nOptions:" -FGC Cyan
        echo "1: Fix CMD Banner and Directory (cd to D:\Desktop and clear screen)"
        echo "2: Restore default (show banner, default directory)"
        echo "3: Return to main menu"
        
        # Get user selection
        $Option = Read-Host "`nSelect an option"
        
        # Process user selection with comprehensive logic
        # Handles different registry modification scenarios based on user input
        switch ($Option) {
            "1" {
                # Apply setting: change directory and clear screen
                SP -Path $RegPath -Name "AutoRun" -Value "cd /d D:\Desktop && cls" -T String
                echo "`nRegistry updated. Command Prompt will now:" -FGC Green
                echo "- Start in D:\Desktop" -FGC Green
                echo "- Hide the Windows version banner" -FGC Green
                echo "The change will take effect when you open a new Command Prompt window.`n" -FGC Green
                
                # Log the change
                Write-Log "CMD Banner and Directory fixed: Set to start in D:\Desktop and clear screen"
            }
            "2" {
                # Restore defaults
                RP -Path $RegPath -Name "AutoRun" -EA 0
                echo "`nRegistry restored to default. Command Prompt will:" -FGC Green
                echo "- Show the Windows version banner" -FGC Green
                echo "- Start in the default user profile directory" -FGC Green
                echo "The change will take effect when you open a new Command Prompt window.`n" -FGC Green
                
                # Log the change
                Write-Log "CMD Banner and Directory restored to default settings"
            }
            "3" {
                # Return to main menu
                echo "`nReturning to main menu...`n" -FGC Yellow
                Write-Log "Returning to main menu from Fix-CmdBanner"
                return
            }
            default {
                # Handle invalid input
                echo "`nInvalid option. No changes made.`n" -FGC Red
                Write-Log "Invalid option selected in Fix-CmdBanner"
                return
            }
        }
    }
    # Catch and handle any exceptions during registry modification
    # Provides user feedback and logs error details
    catch {
        # Error handling
        echo "`nAn error occurred: $_`n" -FGC Red
        
        # Log the error
        Write-Log "ERROR in Fix-CmdBanner: $_"
    }
    
    # Pause to let user read the message
    echo "Press any key to continue..."
    $Null = [System.Console]::ReadKey($true)
    
    # Log function exit
    Write-Log "Exiting Fix-CmdBanner function"
}

#########################################################
# Set-CmdWindowSize Function
# Description: Sets CMD window dimensions
#########################################################
function Set-CmdWindowSize {
    # Log function entry
    Write-Log "Entering Set-CmdWindowSize function"

    echo "`nSetting CMD Window Size for 4K resolution...`n" -FGC Cyan
    
    # Check if running with admin privileges
    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    # Exit if not running as admin
    if (-not $IsAdmin) {
        echo "This operation requires administrative privileges." -FGC Red
        Write-Log "Set-CmdWindowSize: Administrative privileges required"
        return
    }
    
    # Attempt to modify window size settings with comprehensive error handling
    # Manages potential exceptions during registry modification
    try {
        # Registry path for console settings
        $ConsolePath = "HKCU:\Console"
        
        # Create the key if it doesn't exist
        if (-not (Test-Path $ConsolePath)) {
            NI -Path $ConsolePath -Force | Out-Null
            Write-Log "Created Console registry path: $ConsolePath"
        }
        
        # Define window size
        $Width = $Global:WindowWidth
        $Height = $Global:WindowHeight
        
        # Set window size (Width × Height)
        # The format is: (Height << 16) + Width
        echo "Setting CMD window size to ${Width}x${Height}..." -FGC Yellow
        SP -Path $ConsolePath -Name "WindowSize" -Value (($Height -shl 16) + $Width)
        
        # Set screen buffer size (same width, but larger height for scrolling)
        # The buffer is what allows scrolling beyond what's visible
        SP -Path $ConsolePath -Name "ScreenBufferSize" -Value (($Height * 5 -shl 16) + $Width)
        
        echo "`nCMD window size has been set to ${Width}x${Height}" -FGC Green
        echo "Changes will take effect when you open a new Command Prompt window.`n" -FGC Green
        
        # Log the change
        Write-Log "CMD window size set to ${Width}x${Height}"
    }
    # Catch and handle any exceptions during window size modification
    # Provides user feedback and logs error details
    catch {
        # Error handling
        echo "`nAn error occurred: $_`n" -FGC Red
        
        # Log the error
        Write-Log "ERROR in Set-CmdWindowSize: $_"
    }
    
    # Pause to let user read the message
    echo "Press any key to continue..."
    $Null = [System.Console]::ReadKey($true)
    
    # Log function exit
    Write-Log "Exiting Set-CmdWindowSize function"
}

#########################################################
# Set-CmdFontSize Function
# Description: Sets CMD font type and size
#########################################################
function Set-CmdFontSize {
    # Log function entry
    Write-Log "Entering Set-CmdFontSize function"

    echo "`nSetting CMD Font Size...`n" -FGC Cyan
    
    # Check if running with admin privileges
    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    # Exit if not running as admin
    if (-not $IsAdmin) {
        echo "This operation requires administrative privileges." -FGC Red
        Write-Log "Set-CmdFontSize: Administrative privileges required"
        return
    }
    
    # Attempt to modify font settings with comprehensive error handling
    # Manages potential exceptions during registry modification
    try {
        # Registry path for console settings
        $ConsolePath = "HKCU:\Console"
        
        # Create the key if it doesn't exist
        if (-not (Test-Path $ConsolePath)) {
            NI -Path $ConsolePath -Force | Out-Null
            Write-Log "Created Console registry path: $ConsolePath"
        }
        
        # Define font size
        $FontSize = $Global:FontSize  # Font size in points
        
        # Set font size - the format is (Width << 16) + Height
        # For a square font, width and height are the same
        echo "Setting CMD font size to $FontSize..." -FGC Yellow
        SP -Path $ConsolePath -Name "FontSize" -Value (($FontSize -shl 16) + $FontSize)
        
        # Set font to Consolas (a modern monospace font)
        SP -Path $ConsolePath -Name "FaceName" -Value "Consolas" -T String
        
        # Set font family to TrueType (0x36 = 54 = modern font with stroke weight)
        SP -Path $ConsolePath -Name "FontFamily" -Value 0x00000036
        
        echo "`nCMD font has been set to Consolas $FontSize" -FGC Green
        echo "Changes will take effect when you open a new Command Prompt window.`n" -FGC Green
        
        # Log the change
        Write-Log "CMD font set to Consolas $FontSize"
    }
    # Catch and handle any exceptions during font modification
    # Provides user feedback and logs error details
    catch {
        # Error handling
        echo "`nAn error occurred: $_`n" -FGC Red
        
        # Log the error
        Write-Log "ERROR in Set-CmdFontSize: $_"
    }
    
    # Pause to let user read the message
    echo "Press any key to continue..."
    $Null = [System.Console]::ReadKey($true)
    
    # Log function exit
    Write-Log "Exiting Set-CmdFontSize function"
}

#########################################################
# Apply-AllCmdFixes Function
# Description: Applies all CMD customizations by calling individual functions
#########################################################
function Apply-AllCmdFixes {
    echo "`nApplying All CMD Fixes...`n" -FGC Cyan
    
    # Check if running with admin privileges
    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    # Exit if not running as admin
    if (-not $IsAdmin) {
        echo "This operation requires administrative privileges." -FGC Red
        echo "Please run this script as Administrator and try again.`n" -FGC Red
        return
    }
    
    # Attempt to apply multiple CMD customizations
    # Manages potential exceptions during function calls
    try {
        # Call individual fixing functions in sequence
        Fix-CmdBanner
        Set-CmdWindowSize
        Set-CmdFontSize
        
        echo "`nAll CMD fixes have been applied successfully." -FGC Green
        
        # Log the change
        echo "[$(Get-Date)] All CMD fixes applied" | AC "$Env:TEMP\launcher_log.txt"
    }
    # Catch and handle any exceptions during function calls
    # Provides user feedback and logs error details
    catch {
        # Error handling
        echo "`nAn error occurred while applying fixes: $_`n" -FGC Red
        
        # Log the error
        echo "[$(Get-Date)] ERROR in Apply-AllCmdFixes: $_" | AC "$Env:TEMP\launcher_log.txt"
    }
    
    # Pause to let user read the message
    echo "Press any key to continue..."
    $Null = [System.Console]::ReadKey($true)
}

#########################################################
# Set-ConsolePermanentSize Function
# Description: Sets permanent console window size for multiple PowerShell versions
#########################################################
function Set-ConsolePermanentSize {
    # Log function entry
    Write-Log "Entering Set-ConsolePermanentSize function"

    # Check for administrative privileges to modify registry
    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole(
        [Security.Principal.WindowsBuiltInRole]::Administrator
    )
    
    # Prevent execution without admin rights
    if (-not $IsAdmin) {
        echo "This operation requires administrative privileges." -fgc Red
        Write-Log "Set-ConsolePermanentSize: Administrative privileges required"
        return
    }

    # Alphabetized registry paths for all PowerShell consoles
    $ConsolePaths = @(
        "HKCU:\Console",
        "HKCU:\Console\%SystemRoot%_System32_pwsh.exe",
        "HKCU:\Console\%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe",
        "HKCU:\Console\powershell.exe"
    )
    
    # Define consistent window parameters
    $Width = 100
    $Height = 27
    $FontSize = 20

    # Attempt registry modifications for all console paths
    # Gracefully handles errors to prevent partial configurations
    try {
        # Apply settings across all console paths
        foreach ($ConsolePath in $ConsolePaths) {
            # Create registry path if missing
            if (-not (Test-Path $ConsolePath)) {
                ni -Path $ConsolePath -Force | Out-Null
                Write-Log "Created console registry path: $ConsolePath"
            }

            # Set window size (bitwise height + width)
            sp -Path $ConsolePath -Name "WindowSize" `
               -Value ([int](($Height -shl 16) + $Width)) -EA 0
            
            # Set scrollable buffer
            sp -Path $ConsolePath -Name "ScreenBufferSize" `
               -Value ([int](($Height * 5 -shl 16) + $Width)) -EA 0
            
            # Configure font
            sp -Path $ConsolePath -Name "FontSize" `
               -Value ([int](($FontSize -shl 16) + $FontSize)) -EA 0
            sp -Path $ConsolePath -Name "FontFamily" -Value 0x00000036 -EA 0
            sp -Path $ConsolePath -Name "FaceName" -Value "Consolas" -EA 0
        }
        
        echo "Console size and font permanently set for PowerShell" -fgc Green
        Write-Log "Console size and font set across multiple PowerShell instances"
    }
    catch {
        echo "Error setting console size: $_" -fgc Red
        Write-Log "ERROR in Set-ConsolePermanentSize: $_"
    }

    # Pause to let user read the message
    echo "Press any key to continue..."
    $Null = [System.Console]::ReadKey($true)
    
    # Log function exit
    Write-Log "Exiting Set-ConsolePermanentSize function"
}

#########################################################
# Main Program Loop
# Description: Continuous menu-driven program execution
# Handles user interactions and function calls
#########################################################
# Main program loop
do {
    # Display the menu
    Show-Menu
    
    # Get user selection
    $Selection = Read-Host "`nSelect an option"
    
    # Process user selection with comprehensive option handling
    # Manages menu navigation, function invocation, and program exit
    switch ($Selection) {
        # Option to fix CMD banner and directory
        "1" {
            Fix-CmdBanner
        }
        # Option to set CMD window size
        "2" {
            Set-CmdWindowSize
        }
        # Option to set CMD font size
        "3" {
            Set-CmdFontSize
        }
        # Option to apply all CMD fixes (uppercase A)
        "A" {
            Apply-AllCmdFixes
        }
        # Option to apply all CMD fixes (lowercase a)
        "a" {
            Apply-AllCmdFixes
        }
        # Option to quit (uppercase Q)
        "Q" {
            echo "`nExiting program. Goodbye!`n" -FGC Green
            return
        }
        # Option to quit (lowercase q)
        "q" {
            echo "`nExiting program. Goodbye!`n" -FGC Green
            return
        }
        # Handle invalid selections with user feedback
        default {
            echo "`nInvalid selection. Please try again.`n" -FGC Red
            Start-Sleep -Seconds 2
        }
    }
} while ($true)